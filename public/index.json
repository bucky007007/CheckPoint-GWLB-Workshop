[
{
	"uri": "/",
	"title": "Check Point CloudGuard Network Security - Integration with AWS Gateway Load Balancer",
	"tags": [],
	"description": "",
	"content": "Check Point CloudGuard Network Security - Integration with AWS Gateway Load Balancer Welcome! In this workshop you will learn how to deploy Check Point CloudGuard Network Security with AWS Gateway Load Balancer as well as architecture options to support 3 different traffic flows: ingress, egress, and east-west.\nLearning Objectives Use CloudFormation template to automatically create the CloudGuard Network Security components, AWS Gateway Load Balancer, and all other required AWS resources needed to test traffic flows Interact with Check Point Security Management to build a security policy Test ingress, egress, and east-west traffic flows Monitor the traffic flows using Check Point Security Management logging capabilities "
},
{
	"uri": "/01gettingstarted.html",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Getting started Welcome to the workshop! "
},
{
	"uri": "/02handsonflows.html",
	"title": "Traffic Flow Demonstrations",
	"tags": [],
	"description": "",
	"content": "Demos for each type of traffic flow Scenarios Centralized E-W across Spokes Centralized Egress Distributed Subnet-Subnet Distributed Ingress \u0026amp; Egress Review AWS Blog in Ingress flows with GWLB Centralized Ingress (Inspection second) Centralized Ingress (Inspection first) "
},
{
	"uri": "/02handsonflows/2_centew.html",
	"title": "Centralized E/W across Spokes",
	"tags": [],
	"description": "",
	"content": "Centralized E/W across Spokes Flow Description \u0026amp; Diagram # Hop description 1 DB host to SS host, 0/ \u0026ndash;\u0026gt; TGW 2 TGW Attachment RT 0/ \u0026ndash;\u0026gt; Sec VPC 3 Sec VPC TGW Attach RT 0/ \u0026ndash;\u0026gt; GWLBe 4 GWLBe magic: GWLB (GENEVE) \u0026ndash;\u0026gt; CGNS and return back to GWLBe 5 GWLBe RT Spoke \u0026ndash;\u0026gt; TGW 6 TGW Propagated RT \u0026ndash;\u0026gt; SS Spoke/Host Testing Procedure SSH to any of the EC2 hosts in Database or Shared Services VPC Ping one of the other EC2 hosts with its private IP Search the Check Point logs for the internal IPs of the EC2 Host you’re sending the ping from and to "
},
{
	"uri": "/intro.html",
	"title": "Check Point CloudGuard Network Security - Integration with AWS Gateway Load Balancer",
	"tags": [],
	"description": "",
	"content": "Check Point CloudGuard Network Security Workshop - Intro Welcome In this workshop you will learn how to deploy Check Point CGNS with AWS Gateway Load Balancer as well as architecture options to support 3 different traffic flows: outbound, east-west, and inbound.\n"
},
{
	"uri": "/01gettingstarted/2_wsarch.html",
	"title": "Workshop Logistics",
	"tags": [],
	"description": "",
	"content": "Workshop Logistics AWS GWLB Reference Architecture Diagram Notes: There are several different ways to organize your AWS architecture to take advantage of CloudGuard Network Security(CGNS) traffic inspection with AWS GWLB. It is important to remember that as long as the traffic has a symmetrical routing path for forward and reverse flow, the architecture will work. This diagram may look complicated at first glance because it covers ALL Traffic Flow Options. For each scenario, we will highlight the components involved in that flow. Depending on your requirements you may only require a subset of the flows and accordingly a subset of this Reference Architecture Learning Objectives Learn the difference between Centralized and Decentralized GWLB \u0026amp; GWLBe Architectures Understand how each flow works Understand the differences and advantages/disadvantages of centralized ingress architecture options "
},
{
	"uri": "/02handsonflows/3_centegress.html",
	"title": "Centralized Egress",
	"tags": [],
	"description": "",
	"content": "Centralized Egress Flow Description \u0026amp; Diagram # Hop description 1 DB host to Shared Services host, 0/ \u0026ndash;\u0026gt; TGW 2 TGW Attachment RT 0/ \u0026ndash;\u0026gt; Security VPC 3 Security VPC TGW Attach RT 0/ \u0026ndash;\u0026gt; GWLBe 4 GWLBe magic: GWLB (GENEVE) \u0026ndash;\u0026gt; CGNS and return back to GWLBe 5 GWLBe RT Spoke\u0026ndash;\u0026gt; TGW 6 TGW Propagated RT \u0026ndash;\u0026gt; SS Spoke/Host 1 Shared Services host to Internet 0/\u0026ndash;\u0026gt; TGW 2 TGW Attachment RT 0/ \u0026ndash;\u0026gt; Sec VPC 3 Security VPC TGW Attach RT 0/ \u0026ndash;\u0026gt; GWLBe 4 GWLBe magic: GWLB (GENEVE) \u0026ndash;\u0026gt; CGNS and return back to GWLBe 5 GWLBe RT 0/ \u0026ndash;\u0026gt; NATGW 6 NATGW (egress NAT) 0/ \u0026ndash;\u0026gt; IGW 7 IGW \u0026ndash;\u0026gt; Internet host 8-13 Reverse flow Testing Procedure SSH to any of the hosts in Database or Shared Services VPC (either NLB + :8022, :8033, :8044) Ping 8.8.8.8 Curl www.google.com Search for the internal IP of the EC2 Host you’re sending the ping/curl from "
},
{
	"uri": "/01gettingstarted/3_gwlbeoptions.html",
	"title": "GWLBe Options",
	"tags": [],
	"description": "",
	"content": "AWS GWLBe Options Distributed Architecture The Distributed GWLB Architecture features an IGW and GWLBe in each VPC. Accordingly, the ingress \u0026amp; egress Internet traffic from that VPC use the local IGW.\nCentralized Architecture The Centralized GWLB Architecture connects VPCs together with TGW and use a Centralized Ingress and Egress from either\nCombined Security VPC (as we see in this workshop) Dedicated Internet VPC attached to TGW (not covered in this workshop) "
},
{
	"uri": "/02handsonflows/4_distsub2sub.html",
	"title": "Distributed Subnet to Subnet",
	"tags": [],
	"description": "",
	"content": "Distributed Subnet to Subnet Flow Description \u0026amp; Diagram # Hop description 1 SS01 to SS02 MSR \u0026ndash;\u0026gt; GWLBe02 2 GWLBe magic: GWLB (GENEVE) \u0026ndash;\u0026gt; CGNS and return back to GWLBe 3 GWLBe SpokeCIDR \u0026ndash;\u0026gt; Local Testing Procedure Ssh to one of the Shared Services hosts (either NLB :8033 or :8044)\nPing the other SharedServices host Realize the pings don’t work b/c MSR routes are not in place on the Shared Services Web Tier RTs\n10.100.4.0/22 Local CIDR needs a new Next Hop in RT for Sub01 \u0026amp; Sub02\nSub01 route should oppose the 10.100.5.0/24 VPCE Sub02 route should oppose the Sub01 VPCE Search for the internal IP of the EC2 Hosts in shared services Spoke\n"
},
{
	"uri": "/02handsonflows/5_distinout.html",
	"title": "Distributed Ingress &amp; Egress",
	"tags": [],
	"description": "",
	"content": "Distributed Ingress \u0026amp; Egress Flow Description \u0026amp; Diagram # Hop description Outbound 1 Web-Tier to Internet 0/ \u0026ndash;\u0026gt; GWLBe 2 GWLBe magic: GWLB (GENEVE) \u0026ndash;\u0026gt; CGNS and return back to GWLBe 3 GWLBe 0/ \u0026ndash;\u0026gt; IGW # Hop description Inbound 3 IGW Ingress RT Web-Tier \u0026ndash;\u0026gt; GWLB 2 GWLBe magic: GWLB (GENEVE) \u0026ndash;\u0026gt; CGNS and return back to GWLBe 1 GWLBe Spoke 3 VPC\u0026ndash;\u0026gt; Local Testing Procedure SSH to 11WebTierEC2PrivIp with ee-default-keypair Once logged in: ping 8.8.8.8 curl www.google.com Search for the internal IP of the EC2 Host in Web-Tier Spoke "
},
{
	"uri": "/01gettingstarted/5_securitypolicysetup.html",
	"title": "Initial Setup",
	"tags": [],
	"description": "",
	"content": "Initial Setup (Credentials and Check Point Security Policy Setup) Preparing the environment NOTE: The below steps assume you are performing this workshop as part of an AWS Immersion Day\u0026hellip;if you wish to run this in your own environment you can simply run the following CloudFormation Template manually: CGNS GWLB CFT\nBrowse to the AWS Event Engine link that was provided, Accept Terms and Login Select the Email One-Time Password (OTP) option\u0026hellip;it is recommended to send the OTP to a personal email address to avoid potential expiration of the OTP due to corporate security controls. After entering your OTP you should see a screen like this: Select the SSH Key option above Download Key to a location on your computer Copy the Key Fingerprint to a text file Copy the Key Material to a second text file Click OK when done If you are using PuTTY you can use PuTTYgen to create the PPK file needed from the PEM file downloaded in step A above Click on AWS Console Select Copy Login Link and save it to a text file and followed by selecting Open AWS Console(will open in a new tab) After launching the AWS console double-check that you are in Oregon(us-west-2) \u0026raquo;\u0026gt; NOTE: Only required with Immersion Day Navigate to the CloudFormation area in the AWS Console In the Stacks view click View nested to hide all nested Stacks and then select the remaining Stack to view its details and output. Navigate to Outputs and record the keys and values (highlighting, copying and pasting into excel may be the best/cleanest method) Using the URL associated with the 01SmartConsoleURL key in the CFT output gives you the Public IP for the Check Point Security Management Server Login to the Check Point SmartConsole application via one of two methods: URL provided in the previous step to access the Web SmartConsole: https://publicIP/smartconsole (make sure to open it in a new tab) R81.10 SmartConsole Windows application \u0026gt; Use Public IP from above\u0026hellip;if you don\u0026rsquo;t already have it you can download it HERE Username is: admin Password is: qwe123! Verify that the CloudGuard Network Security Gateways have been discovered by the Security Management Server (your IP addresses will likely be different) Check Point Security Policy Setup Now, we need to login to the Check Point Web SmartConsole to setup an initial security policy for the workshop, which will allow us to test all traffic flows.\nSECURITY DISCLAIMER – this is a sample policy for this WORKSHOP ONLY and it NOT SUITABLE for a production environment!!!! Navigate to the Security Policies tab in SmartConsole Create a new rule above the default Cleanup rule The result should look like this\u0026hellip;in this example we gave the rule the name Allow Outbound Modify the new rule to allow the network 10.100.0.0/16 outbound access to ANY Give your rule a name if preferred(not required) Add a new network object that represents 10.100.0.0/16 to the Source field Result should look like this: Modify the rule so that Destination is ANY Set the Service \u0026amp; Applications field to be ANY Set Action to Accept Set Track to Log The end result of the new rule should look like this: Using the same procedure as above, create another rule that allows Inbound traffic to the following networks: 10.100.0.0/16 10.0.15.0/24 10.0.25.0/24 10.0.35.0/24 When complete also set the Cleanup rule to Log. The end result should look like this: Install Policy to push the new security policy to the Security Gateways "
},
{
	"uri": "/02handsonflows/6_centininspectsecond.html",
	"title": "Centralized Ingress (Inspection Second)",
	"tags": [],
	"description": "",
	"content": "Centralized Ingress (Inspection Second) Flow Description \u0026amp; Diagram # Hop description 1 Internet to NLB:8022 2 NLB (NAT) SpokeCIDR \u0026ndash;\u0026gt; GWLBe 3 GWLBe magic: GWLB (GENEVE) \u0026ndash;\u0026gt; CGNS and return back to GWLBe 4 GWLbe Spoke CIDR \u0026ndash;\u0026gt; TGW \u0026ndash;\u0026gt; Propagated Spokes 5-8 Reverse Flow Testing Procedure SSH to the NLBInspectionSecond:8022 with ee-default-keypair Search for the NLB IP (10.0.13.0/24) and internal IP of the EC2 Host in databse VPC (10.100.0.x) Port 22 is the traffic you just generated Port 111 is health checks "
},
{
	"uri": "/01gettingstarted/6_testhostlogin.html",
	"title": "Test Host Login",
	"tags": [],
	"description": "",
	"content": "Testing Procedures Login to test EC2 instances The test EC2 instances are secured by inbound GWLB flows. To access the instance, you will need to use the Load Balancer DNS names and EC2 Private keys provided in the CloudFormation Output\nUse the DNS name above to login via SSH(using Putty or Terminal) with the Private key provided to the following EC2 instances…be sure to note the special port being used for the DB and Shared Services instances\nDB instance: dnsname:8022 Shared Services instance #1: dnsname:8033 Shared Services instance #2: dnsname:8044 Web-Tier instance: Public IP as defined by the CFT NOTE #1: The username for the ec2 instances is ec2-user\nNOTE #2: To avoid having your SSH sessions timeout, run a continuous ping to the internet after connecting…GWLB connections have a hard set 350 second timeout for TCP flows\nTest EC2 Host \u0026amp; NLB Port Info VPC EC2 Host AZ SSH Internal Subnet Database database-EC2-*** A NLB:8022 10.100.0.x/24 SharedServices shared-services-EC2-01-*** A NLB:8033 10.100.4.x/24 SharedServices shared-services-EC2-02-*** B NLB:8034 10.100.05x/24 Web Tier Web-tier-ec2-*** A Public IP from CFT 10.100.8.x/24 NLB Listeners \u0026ndash;\u0026gt; TargetGroup AZ Health Check Internal Subnet InspectFirst 8022 \u0026ndash;\u0026gt; database-EC2-*** A,B,C 111 10.0.15.0/24, 10.0.25.0/24, 10.0.35.0/24 - 8033 \u0026ndash;\u0026gt; shared-services-EC2-01-*** - - - - 8044 \u0026ndash;\u0026gt; shared-services-EC2-02-*** - - - InspectSecond 8022 \u0026ndash;\u0026gt; database-EC2-*** A, B, C 111 10.0.13.0/24, 10.0.23.0/24, 10.0.33.0/24 - 8033 \u0026ndash;\u0026gt; shared-services-EC2-01-**** - - - - 8044 \u0026ndash;\u0026gt; shared-services-EC2-02-**** - - - CloudGuard Instances VPC EC2 Host AZ SSH Internal Subnet Security Check-Point-Gateway-1 A - 10.0.10.x/24 Security Check-Point-Gateway-1 B - 10.0.20.x/24 Security Check-Point-Gateway-1 C - 10.0.30.x/24 Security Gwlb-management-server A Public IP from CFT 10.0.10.x/24 Test Internet(outbound) traffic Validate that pings and web requests to the internet are successful from each instance above\nping 8.8.8.8 curl www.google.com "
},
{
	"uri": "/02handsonflows/7_centininspectfirst.html",
	"title": "Centralized Ingress (Inspection First)",
	"tags": [],
	"description": "",
	"content": "Centralized Ingress (Inspection First) Flow Description \u0026amp; Diagram # Hop description 1 Internet to NLB:8022 2 Ingress RT NLB \u0026ndash;\u0026gt; GWLBe 3 GWLBe magic: GWLB (GENEVE) \u0026ndash;\u0026gt; CGNS and return back to GWLBe 4 GWLBe Sec VPC \u0026ndash;\u0026gt; Local (NLB) 5 NLB (NAT) Spoke CIDR \u0026ndash;\u0026gt; TGW \u0026ndash;\u0026gt; Propagated Spokes 6-10 Reverse Flow Testing Procedure SSH to the NLBInspectionFirst:8033 with ee-default-keypair Search for your Public IP address or the internal IP of the destination EC2 Host "
},
{
	"uri": "/01gettingstarted/7_tipstricks.html",
	"title": "Tips and tricks",
	"tags": [],
	"description": "",
	"content": "Tips and Tricks Helpful Items AWS Load Balancing\u0026hellip;including GWLB AWS Blogs for GWLB Check Point SK for GWLB Architectures Repetitive testing tool for AL2 CLI: Apache Benchmark yum install httpd-tools\rfor i in {1..100}; do ab -n 1000 -c 100 http://www.google.com; done Gateway Load Balancer Limitations \u0026amp; Considerations Flow Stickiness Currently GWLB flow hashing default 5 Tuple (TCP) and 4 Tuple (UDP) Multi layered protocols may be hashed differently Currently flows are sticky for their lifetime. If an appliance crashes, the application must re-establish TCP flow Flow idle timeouts Currently fixed and unchangable 350s for TCP 120s for UDP No VPN Currently Check Point does not support VPN with GWLB architectures Cost GWLB \u0026amp; GWLBe both have per hour per AZ costs \u0026amp; a Data charge "
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]